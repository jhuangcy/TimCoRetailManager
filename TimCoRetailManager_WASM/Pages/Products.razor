@page "/products"
@using Microsoft.Extensions.Configuration
@inject IConfiguration config
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IProductService productService
@attribute [Authorize(Roles = "Cashier")]

<h3>Products</h3>

<div class="container-fluid">
    @if (products.Count == 0)
    {
        <div class="row">
            <p>No products found.</p>
        </div>
    }
    else
    {
        <div class="row">
            @foreach (var p in products)
            {
                <div class="col-lg-6 col-xl-4 mb-3">
                    <div class="container">
                        <div class="row">
                            <div class="col-12">
                                <a href="#">
                                    @if (string.IsNullOrEmpty(p.Image))
                                    {
                                        <img src="https://picsum.photos/seed/picsum/1200/900" class="img-fluid" alt="@p.Name" />
                                    }
                                    else
                                    { 
                                        <img src="@(api + p.Image)" class="img-fluid" alt="@p.Name" />
                                    }
                                </a>
                                <p class="my-2 text-justify">@p.Description</p>
                                <p class="mb-1"><strong>Quantity:</strong> @p.Qty</p>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-12">
                                <h5 class="mb-3">@p.Name: $@p.RetailPrice</h5>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

@code {
    const string PRODUCTS = "products";
    const string CACHE_DATE = "cache-date";

    List<Product> products = new();
    string api;

    protected override async Task OnInitializedAsync()
    {
        var mins = 0d;

        api = config["api"];
        products = await localStorage.GetItemAsync<List<Product>>(PRODUCTS);
        var cacheDate = await localStorage.GetItemAsync<DateTime?>(CACHE_DATE);

        if (cacheDate != null)
        {
            mins = DateTime.UtcNow.Subtract((DateTime)cacheDate).TotalMinutes;
        }

        if (products == null || cacheDate == null || mins > 10)
        {
            try
            {
                products = await productService.GetAllAsync();
                await localStorage.SetItemAsync(PRODUCTS, products);
                await localStorage.SetItemAsync(CACHE_DATE, DateTime.UtcNow);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }
    }
}
