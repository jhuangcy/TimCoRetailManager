@page "/login"
@inject NavigationManager nav
@inject IAuthService authService

<h3>Login</h3>

@if (showAuthError)
{
    <div class="alert alert-danger" role="alert">@authError</div>
}

<EditForm Model="model" OnValidSubmit="ExecuteLogin" class="card card-body bg-light mt-5">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    @*<ValidationSummary></ValidationSummary>*@

    <div class="row form-group">
        <label for="email" class="col-md-2 col-form-label">Email</label>
        <div class="col-md-10">
            <InputText @bind-Value="model.Email" id="email" class="form-control"></InputText>
            <ValidationMessage For="@(() => model.Email)"></ValidationMessage>
        </div>
    </div>

    <div class="row form-group">
        <label for="password" class="col-md-2 col-form-label">Password</label>
        <div class="col-md-10">
            <InputText @bind-Value="model.Password" id="password" type="password" class="form-control"></InputText>
            <ValidationMessage For="@(() => model.Password)"></ValidationMessage>
        </div>
    </div>

    <div class="row">
        <div class="col-md-12">
            <button type="submit" class="btn btn-success">Login</button>
        </div>
    </div>
</EditForm>

@code {
    LoginViewModel model = new();

    bool showAuthError = false;
    string authError = "";

    async Task ExecuteLogin()
    {
        showAuthError = false;

        var res = await authService.Login(model);
        if (res != null)
        {
            nav.NavigateTo("/");
        }
        else
        {
            authError = "There was an error trying to log in";
            showAuthError = true;
        }
    }
}
